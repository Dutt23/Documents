//
Bebel
browserify
How Typescript ---> Javascript

//MySQL
starting it
mysql -u root -p
Container run 
docker exec -it some-mysql bash

//Docker
- itd
i for interaction
t ttycl , t is required always. Running in a specific cell
d , daemon

docker rm <Container name>

docker restart <Name of container>
docker rmi <imageid/name> -f , for rebuilding

//Task Manager
gnome-system-monitor
cntrl+shift+T

//Beautifying code
cntrl+shift+F//Eclipse
cntrl + I , or something //VS

//Comments
alt+shift+J

//Env Variables
Uber jar.
 Has all the classes , compiles them.
 
 Spring environemtn variables.
 
 
 loggin.pattern.console = %clr(%d{datething}){color}.
 
 logging.size.limit.
 
 env environment variables.
 set shell variables.
 
 echo $ name of variable , check value of anyu variable.
 set | less , check what is a pipe.
 
 
 DEFINE SHELL VARIBLE
 TEST_VAR="Shatyaki";
 echo $TEST_VAR
 
 set | grep Variablename(No dollar)
 
 unset variableName
 
 
 vim <nameoffile>.sh
 chmod +x <filename>.sh
 ./<filename>.sh

//Console
sudo netstat -tupln

sudo kill -15 PID

mysql --host=127.0.0.1 --user=root

sudo fuser -n tcp -k 4200

//MONGO
show databases
use database
show collections
use collection
db.collection.find()

//Angular
ng generate module app-routing --flat --module=app // Generate module , but not in it's own file. but in src/app

ng generate component dashboard --moodule=app// generates component dashboard

ng generate hero service --module=app// genrates a service hero, *add it to porvidors in app.module.

ng build --target=production. //AOT production , Hashes everything.



//GIT

git remote rm <Maybe link if normally doesn't work>

git remote add origin <link>

git init 

git add . 

git commit -m "Comments"

git push -u origin master

git remote -v

git clone -b CI-11 --single-branch https://gitlab.stackroute.in
/ITC-Immersive/wave1/maverick.git


zomato key
96ced68a4f764a6f8a19e953dae9bd55
//
Check spring.io for spring cloud dependencies.
//KAFKA
DEPENDENCY 
                  <dependency> 
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

IMPORT
Service
          import org.springframework.kafka.core.KafkaTemplate;
Controller
          import com.javainuse.service.KafkaSender;
@GetMapping(value = "/producer")
	public String producer(@RequestParam("message") String message) {
		kafkaSender.send(message);





sudo apt-key adv --keyserver pool.sks-keyservers.net --recv-key A278B781FE4B2BDA
echo "deb http://www.apache.org/dist/cassandra/debian 311x main" | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list

//Angular
npm install --save @angular/material @angular/cdk

npm install --save @angular/animations

import {BrowserAnimationsModule} from '@angular/platform-browser/animations';

@NgModule({
  ...


  imports: [BrowserAnimationsModule],
//Run with cmd

mvn package && java -jar target/<Jar file name>






